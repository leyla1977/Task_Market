package ru.netology;


import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Basket {
    // –ö–ª—é—á ‚Äî –ø—Ä–æ–¥—É–∫—Ç, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    private final Map<Product, Integer> items = new HashMap<>();

    // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É (—É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1)
    public void addProduct(Product product) {
        items.put(product, items.getOrDefault(product, 0) + 1);
    }

    // –£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (—É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1, –µ—Å–ª–∏ 0 ‚Äî —É–¥–∞–ª–∏—Ç—å)
    public void removeProduct(Product product) {
        if (!items.containsKey(product)) {
            System.out.println("–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
            return;
        }
        int count = items.get(product);
        if (count <= 1) {
            items.remove(product);
        } else {
            items.put(product, count - 1);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    public Set<Product> getProducts() {
        return items.keySet();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    public int getQuantity(Product product) {
        return items.getOrDefault(product, 0);
    }

    // –í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    public void printBasket() {
        if (items.isEmpty()) {
            System.out.println("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
            return;
        }
        System.out.println("üõí –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:");
        for (Map.Entry<Product, Integer> entry : items.entrySet()) {
            Product p = entry.getKey();
            int qty = entry.getValue();
            // –í—ã–∑–æ–≤–µ–º –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            System.out.println("ID: " + p.getId() + " | " + p.toStringForBasket(qty));
        }
        System.out.printf("üí∞ –û–±—â–∞—è —Å—É–º–º–∞: %.2f —Ä—É–±.%n", getTotalAmount());
    }



    // –û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    public double getTotalAmount() {
        double total = 0;
        for (Map.Entry<Product, Integer> entry : items.entrySet()) {
            total += entry.getKey().getPrice() * entry.getValue();
        }
        return total;
    }
}

