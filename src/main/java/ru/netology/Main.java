package ru.netology;

import java.util.*;
import java.util.stream.Collectors;
import java.util.List;
import java.util.Map;

import static ru.netology.BasketHelper.askToAddToBasket;

public class Main {
    private static int nextOrderId = 1;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
        Manufacturer gmz = new Manufacturer("–ì–æ—Ä–æ–¥–µ—Ü–∫–∏–π –º–æ–ª–æ–∫–æ–∑–∞–≤–æ–¥", "–†–æ—Å—Å–∏—è");
        Manufacturer shz = new Manufacturer("–°–æ—Ä–º–æ–≤—Å–∫–∏–π —Ö–ª–µ–±–∑–∞–≤–æ–¥", "–†–æ—Å—Å–∏—è");
        Manufacturer spf = new Manufacturer("–°–µ–π–º–æ–≤—Å–∫–∞—è –ø—Ç–∏—Ü–µ—Ñ–∞–±—Ä–∏–∫–∞", "–†–æ—Å—Å–∏—è");
        Manufacturer bl = new Manufacturer("–ë—Ä–µ—Å—Ç-–ª–∏—Ç–æ–≤—Å–∫–∏–π", "–ë–µ–ª–∞—Ä—É—Å—å");
        Manufacturer kmk = new Manufacturer("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –º–∞—Å–ª–æ–∂–∏—Ä–æ–∫–æ–º–±–∏–Ω–∞—Ç", "–†–æ—Å—Å–∏—è");

        // –†–µ–π—Ç–∏–Ω–≥–∏
        Rating milkRating = new Rating(5, 4, 5, 5);
        Rating breadRating = new Rating(4, 5, 5, 3);
        Rating eggsRating = new Rating(5, 5, 4, 4);
        Rating cheeseRating = new Rating(5, 4, 4, 4);
        Rating juiceRating = new Rating(5, 5, 5, 4);

        // –ü—Ä–æ–¥—É–∫—Ç—ã
        List<Product> allProducts = List.of(
                new Product(1, "–ú–æ–ª–æ–∫–æ", gmz, 75, 150, milkRating),
                new Product(2, "–•–ª–µ–±", shz, 50, 200, breadRating),
                new Product(3, "–Ø–π—Ü–∞", spf, 100, 50, eggsRating),
                new Product(4, "–°—ã—Ä", bl, 1000, 100, cheeseRating),
                new Product(5, "–ú–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", kmk, 150, 50, juiceRating)
        );
        PurchaseHistory purchaseHistory = new PurchaseHistory();
        Basket userBasket = new Basket();
        List<Order> orders = new ArrayList<>();
        BasketBuilder basketBuilder = new BasketBuilder(purchaseHistory);




        while (true) {
            System.out.println("\n=== –ú–ï–ù–Æ ===");
            System.out.println("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã");
            System.out.println("2. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É");
            System.out.println("3. –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é");
            System.out.println("4. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É");
            System.out.println("5. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
            System.out.println("6. –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–∫–∞–∑–∞");
            System.out.println("7. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑");
            System.out.println("8. –í–æ–∑–≤—Ä–∞—Ç –∑–∞–∫–∞–∑–∞");
            System.out.println("9. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫");
            System.out.println("0. –í—ã—Ö–æ–¥");

            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    allProducts.forEach(System.out::println);
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É, –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞: ");
                    String input = scanner.nextLine();
                    if (!input.equals("0")) {
                        String[] ids = input.split(",");
                        for (String idStr : ids) {
                            try {
                                int id = Integer.parseInt(idStr.trim());
                                allProducts.stream()
                                        .filter(p -> p.getId() == id)
                                        .findFirst()
                                        .ifPresentOrElse(
                                                product -> {
                                                    userBasket.addProduct(product);  // –¢–∞–∫ –Ω—É–∂–Ω–æ
                                                    System.out.println("‚úÖ –¢–æ–≤–∞—Ä \"" + product.getProductName() + "\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.");
                                                },
                                                () -> System.out.println("‚ùå –¢–æ–≤–∞—Ä —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                                        );
                            } catch (NumberFormatException e) {
                                System.out.println("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: " + idStr);
                            }
                        }
                    }
                    break;


                case "2":
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ");
                    String keyword = scanner.nextLine();

                    List<Product> matched = allProducts.stream()
                            .filter(p -> p.isMatches(keyword))
                            .collect(Collectors.toList());

                    if (matched.isEmpty()) {
                        System.out.println("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                        break;
                    }

                    System.out.println("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:");
                    matched.forEach(System.out::println);

                    System.out.println("–£—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ –∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥—É? (1 - —Ü–µ–Ω–∞, 2 - —Ä–µ–π—Ç–∏–Ω–≥, 0 - –Ω–µ—Ç): ");
                    int refine = Integer.parseInt(scanner.nextLine());
                    if (refine == 1) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. —Ü–µ–Ω—É: ");
                        double maxPrice = Double.parseDouble(scanner.nextLine());
                        matched = matched.stream()
                                .filter(p -> p.getPrice() <= maxPrice)
                                .collect(Collectors.toList());
                    } else if (refine == 2) {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥: ");
                        double minRating = Double.parseDouble(scanner.nextLine());
                        matched = matched.stream()
                                .filter(p -> p.getRating().calculateAverage() >= minRating)
                                .collect(Collectors.toList());
                    }



                case "3": {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: ");
                    String manufacturerName = scanner.nextLine().toLowerCase();
                    List<Product> byManufacturer = allProducts.stream()
                            .filter(p -> p.getManufacturer().getManufacturerName().toLowerCase().contains(manufacturerName))
                            .collect(Collectors.toList());

                    if (byManufacturer.isEmpty()) {
                        System.out.println("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                    } else {
                        byManufacturer.forEach(System.out::println);
                        askToAddToBasket(scanner, userBasket, byManufacturer);
                    }
                    break;
                }


                case "4":
                    if (userBasket.isEmpty()) {
                        System.out.println("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
                    } else {
                        System.out.println("üõí –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:");

                        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ
                        List<Product> allItemsInBasket = userBasket.getAllItemsAsList();

                        Map<Product, Long> productCount = allItemsInBasket.stream()
                                .collect(Collectors.groupingBy(p -> p, Collectors.counting()));

                        productCount.forEach((product, count) -> {
                            System.out.println("ID: " + product.getId() + " | " + product.getProductName() + " - "
                                    + product.getPrice() + " (" + product.getManufacturer().toString() + ") –ö–æ–ª-–≤–æ: " + count + " –µ–¥.");
                        });


                        double total = allItemsInBasket.stream().mapToDouble(Product::getPrice).sum();
                        System.out.println("üí∞ –û–±—â–∞—è —Å—É–º–º–∞: " + total + " —Ä—É–±.");


                        while (true) {
                            System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                            System.out.println("1. ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
                            System.out.println("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É");
                            System.out.println("3. ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã");
                            System.out.println("0. üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");

                            String subChoice = scanner.nextLine();
                            switch (subChoice) {
                                case "1":
                                    Order newOrder = new Order(userBasket.getAllItemsAsList());
                                    orders.add(newOrder);
                                    System.out.println("üì¶ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: " + newOrder.getOrderId());

                                    //  –î–æ–±–∞–≤–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
                                    for (Product p : userBasket.getProducts()) {
                                        int qty = userBasket.getQuantity(p);
                                        for (int i = 0; i < qty; i++) {
                                            purchaseHistory.addPurchase(p);
                                        }
                                    }

                                    userBasket.clear();
                                    break;


                                case "2":
                                    System.out.println("üìÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:");
                                    allProducts.forEach(p -> System.out.println("ID: " + p.getId() + " | " + p.getProductName()
                                            + " - " + p.getPrice() + " (" + p.getManufacturer().toString() + ") –ö–æ–ª-–≤–æ: " + p.getQuantity() + " –µ–¥."));
                                    System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ");
                                    try {
                                        int idToAdd = Integer.parseInt(scanner.nextLine());
                                        allProducts.stream()
                                                .filter(p -> p.getId() == idToAdd)
                                                .findFirst()
                                                .ifPresentOrElse(
                                                        p -> {
                                                            userBasket.addProduct(p);

                                                            System.out.println("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: " + p.getProductName());
                                                        },
                                                        () -> System.out.println("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                                                );
                                    } catch (NumberFormatException e) {
                                        System.out.println("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
                                    }
                                    break;
                                case "3":
                                    System.out.println("\uD83D\uDCDD –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:");
                                    List<Product> basketItems = userBasket.getAllItemsAsList();
                                    Map<Product, Long> itemsCount = basketItems.stream()
                                            .collect(Collectors.groupingBy(p -> p, Collectors.counting()));


                                    productCount.forEach((product, count) -> {
                                        System.out.println("ID: " + product.getId() + " | " + product.getProductName() + " - "
                                                + product.getPrice() + " (" + product.getManufacturer().toString() + ") –ö–æ–ª-–≤–æ: " + count + " –µ–¥.");
                                    });
                                    System.out.print("–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                                    try {
                                        int idToRemove = Integer.parseInt(scanner.nextLine());
                                        Optional<Product> productToRemove = productCount.keySet().stream()
                                                .filter(p -> p.getId() == idToRemove)
                                                .findFirst();

                                        productToRemove.ifPresentOrElse(
                                                product -> {
                                                    userBasket.removeProduct(product);
                                                    System.out.println("‚ùé –£–¥–∞–ª—ë–Ω –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞: " + product.getProductName());
                                                },
                                                () -> System.out.println("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
                                        );
                                    } catch (NumberFormatException e) {
                                        System.out.println("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.");
                                    }
                                case "0":
                                    break;
                                default:
                                    System.out.println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                            }
                            if (subChoice.equals("0") || subChoice.equals("1")) {
                                break;
                            }
                        }
                    }
                    break;



                case "5":
                    if (userBasket.getProducts().isEmpty()) {
                        System.out.println("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã.");
                    } else {
                        Order order = new Order(userBasket.getAllItemsAsList()); // ‚úÖ

                        orders.add(order);

                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
                        for (Product p : userBasket.getAllItemsAsList()) {
                            purchaseHistory.addPurchase(p);
                        }
                        
                        userBasket.clear();
                        System.out.println("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: " + order);
                    }
                    break;

                case "6":
                    if (orders.isEmpty()) {
                        System.out.println("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
                    } else {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞: ");
                        try {
                            int orderId = Integer.parseInt(scanner.nextLine());

                            orders.stream()
                                    .filter(order -> order.getOrderId() == orderId)
                                    .findFirst()
                                    .ifPresentOrElse(order -> {
                                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
                                        System.out.println("–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:");
                                        System.out.println("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: " + order.getOrderId());
                                        System.out.println("–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: " + order.getOrderDate());
                                        System.out.println("–°—É–º–º–∞: " + order.getTotalAmount() + " —Ä—É–±.");
                                        // –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
                                        order.getProducts().forEach(product ->
                                                System.out.println("- " + product.getProductName() + " | –¶–µ–Ω–∞: " + product.getPrice())
                                        );
                                    }, () -> System.out.println("–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º " + orderId + " –Ω–µ –Ω–∞–π–¥–µ–Ω."));
                        } catch (NumberFormatException e) {
                            System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞.");
                        }
                    }
                    break;


                case "7":
                    if (orders.isEmpty()) {
                        System.out.println("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.");
                    } else {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: ");
                        try {
                            int id = Integer.parseInt(scanner.nextLine());

                            orders.stream()
                                    .filter(o -> o.getOrderId() == id)
                                    .findFirst()
                                    .ifPresentOrElse(order -> {
                                        for (Product p : order.getProducts()) {
                                            userBasket.addProduct(p); // –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
                                        }
                                        System.out.println("–¢–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.");
                                    }, () -> System.out.println("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."));

                        } catch (NumberFormatException e) {
                            System.out.println("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.");
                        }
                    }
                    break;


                case "8":
                    if (orders.isEmpty()) {
                        System.out.println("‚ùó –ù–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.");
                    } else {
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ");
                        try {
                            int returnId = Integer.parseInt(scanner.nextLine());
                            Optional<Order> orderOpt = orders.stream()
                                    .filter(o -> o.getOrderId() == returnId)
                                    .findFirst();

                            if (orderOpt.isPresent()) {
                                Order order = orderOpt.get();
                                if (order.isReturned()) {
                                    System.out.println("‚ö† –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω.");
                                } else {
                                    order.setReturned(true);
                                    System.out.println("üîÅ –í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω: " + order);
                                }
                            } else {
                                System.out.println("‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞.");
                        }
                    }
                    break;
                case "9":
                    List<Product> recommended = basketBuilder.buildBasket(3);
                    if (recommended.isEmpty()) {
                        System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.");
                    } else {
                        System.out.println("üß† –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:");
                        recommended.forEach(p -> System.out.println(p));
                    }
                    break;



                case "0":
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                    return;

                default:
                    System.out.println("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
            }
        }
    }


}
